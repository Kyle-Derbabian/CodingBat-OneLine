public boolean groupSumClump(int start, int[] nums, int target) {
  return nums.length == 0 ? target == 0 : new Scanner(Arrays.stream(nums).boxed().collect(Collectors.toList()).toString().replace(",", "").replace("[", "").replace("]", "").replace(" ", "_").trim() + "_").useDelimiter("[" + String.valueOf(nums[0]) + "_]*").hasNext() ? groupSumClump(0, Arrays.copyOfRange(nums, Arrays.stream(nums).boxed().collect(Collectors.toList()).indexOf(Integer.parseInt(String.valueOf(new Scanner(Arrays.stream(nums).boxed().collect(Collectors.toList()).toString().replace(",", "").replace("[", "").replace("]", "").replace(" ", "_").trim() + "_").useDelimiter("[" + String.valueOf(nums[0]) + "_]*").next()))), nums.length), target) || groupSumClump(0, Arrays.copyOfRange(nums, Arrays.stream(nums).boxed().collect(Collectors.toList()).indexOf(Integer.parseInt(String.valueOf(new Scanner(Arrays.stream(nums).boxed().collect(Collectors.toList()).toString().replace(",", "").replace("[", "").replace("]", "").replace(" ", "_").trim() + "_").useDelimiter("[" + String.valueOf(nums[0]) + "_]*").next()))), nums.length), target - nums[0] * Arrays.stream(nums).boxed().collect(Collectors.toList()).indexOf(Integer.parseInt(String.valueOf(new Scanner(Arrays.stream(nums).boxed().collect(Collectors.toList()).toString().replace(",", "").replace("[", "").replace("]", "").replace(" ", "_").trim() + "_").useDelimiter("[" + String.valueOf(nums[0]) + "_]*").next())))) : nums[0] * nums.length == target || target == 0;
}
