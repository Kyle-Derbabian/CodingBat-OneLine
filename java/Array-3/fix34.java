public int[] fix34(int[] nums) {
  return nums.length < 2 ? nums : nums[0] == 3 && nums[1] != 4 ? java.util.stream.Stream.concat(Arrays.asList(new Integer[] {3, 4}).stream(), Arrays.stream(fix34(java.util.stream.Stream.concat(java.util.stream.Stream.concat(Arrays.stream(nums).boxed().collect(Collectors.toList()).subList(2, Arrays.stream(nums).boxed().collect(Collectors.toList()).indexOf(4)).stream(), Arrays.asList(new Integer[] {nums[1]}).stream()).collect(Collectors.toList()).stream(), Arrays.stream(nums).boxed().collect(Collectors.toList()).subList(Arrays.stream(nums).boxed().collect(Collectors.toList()).indexOf(4) + 1, nums.length).stream()).collect(Collectors.toList()).stream().mapToInt(i -> i).toArray())).boxed().collect(Collectors.toList()).stream()).collect(Collectors.toList()).stream().mapToInt(i -> i).toArray() : nums[0] == 4 ? java.util.stream.Stream.concat(Arrays.stream(fix34(java.util.stream.Stream.concat(Arrays.asList(new Integer[] {nums[nums.length - java.util.stream.IntStream.range(0, nums.length).map(i -> (nums.length - 1 - i)).mapToObj(Arrays.stream(nums).boxed().collect(Collectors.toList())::get).collect(Collectors.toCollection(ArrayList::new)).indexOf(3) - 1 + 1]}).stream(), Arrays.stream(nums).boxed().collect(Collectors.toList()).subList(1, nums.length - java.util.stream.IntStream.range(0, nums.length).map(i -> (nums.length - 1 - i)).mapToObj(Arrays.stream(nums).boxed().collect(Collectors.toList())::get).collect(Collectors.toCollection(ArrayList::new)).indexOf(3) - 1).stream()).collect(Collectors.toList()).stream().mapToInt(i -> i).toArray())).boxed().collect(Collectors.toList()).stream(), Arrays.asList(new Integer[] {3, 4}).stream()).collect(Collectors.toList()).stream().mapToInt(i -> i).toArray() : java.util.stream.Stream.concat(Arrays.asList(nums[0] == 3 && nums[1] == 4 ? new Integer[] {3, 4} : new Integer[] {nums[0]}).stream(), Arrays.stream(fix34(Arrays.stream(nums).boxed().collect(Collectors.toList()).subList(nums[0] == 3 && nums[1] == 4 ? 2 : 1, nums.length).stream().mapToInt(i -> i).toArray())).boxed().collect(Collectors.toList()).stream()).collect(Collectors.toList()).stream().mapToInt(i -> i).toArray();
}
