public int[] notAlone(int[] nums, int val) {
  return nums.length == 3 && nums[1] == val && nums[0] != nums[1] && nums[1] != nums[2] ? new int[] {nums[0], Math.max(nums[0], nums[2]), nums[2]} : nums.length <= 3 ? nums : nums[1] == val && nums[0] != nums[1] && nums[1] != nums[2] ? java.util.stream.Stream.concat(Arrays.stream(new int[] {nums[0], Math.max(nums[0], nums[2])}).boxed().collect(Collectors.toList()).stream(), Arrays.stream(notAlone(Arrays.copyOfRange(nums, 2, nums.length), val)).boxed().collect(Collectors.toList()).stream()).collect(Collectors.toList()).stream().mapToInt(i -> i).toArray() : java.util.stream.Stream.concat(Arrays.stream(Arrays.copyOfRange(nums, 0, 1)).boxed().collect(Collectors.toList()).stream(), Arrays.stream(notAlone(Arrays.copyOfRange(nums, 1, nums.length), val)).boxed().collect(Collectors.toList()).stream()).collect(Collectors.toList()).stream().mapToInt(i -> i).toArray();
}
